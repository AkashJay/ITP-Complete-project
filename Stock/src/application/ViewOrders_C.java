package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

import org.controlsfx.control.textfield.TextFields;

import com.jfoenix.controls.JFXButton;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;

import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.scene.layout.AnchorPane;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.scene.control.TableView;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.DatePicker;

import javafx.scene.control.TableColumn;

public class ViewOrders_C implements Initializable{
	
	ObservableList<TableOrders> list1 = FXCollections.observableArrayList();
	ObservableList<TableOrders> list = FXCollections.observableArrayList();
	@FXML
	private AnchorPane pan1;
	@FXML
	private TableView<TableOrders> Jtable_order;
	@FXML
	private TableColumn<TableOrders,String> Jcol_orderid;
	@FXML
	private TableColumn<TableOrders,String> Jcol_Itemcode;
	@FXML
	private TableColumn<TableOrders,Integer> Jcol_amount;
	@FXML
	private TableColumn<TableOrders,Float> Jcol_cost;
	@FXML
	private TableColumn<TableOrders,String> Jcol_supplierid;
	@FXML
	private TableColumn<TableOrders,String> Jcol_orderdate;
	@FXML
	private JFXButton Jbtn_home1;
	@FXML
	private TextField Jtxt_orderid;
	@FXML
	private TextField Jtxt_itemid;
	@FXML
	private TextField Jtxt_quantity;
	@FXML
	private TextField Jtxt_suppplierid;
	@FXML
	private TextField Jtxt_cost;
	@FXML
	private TextField Jtxt_totcost;
	@FXML
	private DatePicker Jdate_orderdate;
	@FXML
	private JFXButton Jbtn_order;
	@FXML
	private JFXButton Jbtn_email;
	@FXML
	private TextField Jtxt_supemail;
	
	@FXML
	private TextField Jtxt_path;
	@FXML
	private JFXButton Jbtn_chhose;
	@FXML
	private TextArea Jtxt_msg;

	// Event Listener on JFXButton[#Jbtn_home1].onAction
	@FXML
	public void btn_home(ActionEvent event) throws Exception {
		// TODO Autogenerated
		((Node)event.getSource()).getScene().getWindow().hide();
    	Stage primaryStage = new Stage();
		Parent root = FXMLLoader.load(getClass().getResource("/application/Home.fxml"));
		Scene scene = new Scene(root);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		primaryStage.initStyle(StageStyle.UNDECORATED);
		primaryStage.setScene(scene);
		primaryStage.show();
	}
	// Event Listener on TextField[#Jtxt_orderid].onAction
	@FXML
	public void Jtxt_orderid(ActionEvent event) {
		// TODO Autogenerated
		Jtxt_itemid.requestFocus();
	}
	// Event Listener on TextField[#Jtxt_itemid].onAction
	@FXML
	public void Jtxt_itemid(ActionEvent event) {
		// TODO Autogenerated
		if("".equals(Jtxt_itemid.getText()))
		{	
			Alert alert = new Alert(AlertType.WARNING);
		alert.setTitle("DATA ERROR");
		//alert.setHeaderText("Information Alert");
		String s ="Insert Item ID";
		alert.setContentText(s);
		alert.show();
		}
		else
		Jtxt_quantity.requestFocus();
	}
	// Event Listener on TextField[#Jtxt_quantity].onAction
	@FXML
	public void Jtxt_quantity(ActionEvent event) {
		// TODO Autogenerated

		Pattern pattern = Pattern.compile("([0-9]*[.])?[0-9]+");
		Matcher matcher = pattern.matcher(Jtxt_quantity.getText());
		if(!matcher.matches()){
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("DATA ERROR");
			//alert.setHeaderText("Information Alert");
			String s ="Invalid Input";
			alert.setContentText(s);
			alert.show();
		}
		if("".equals(Jtxt_quantity.getText()))
		{	
			Alert alert = new Alert(AlertType.WARNING);
		alert.setTitle("DATA ERROR");
		//alert.setHeaderText("Information Alert");
		String s ="Insert Quanitity";
		alert.setContentText(s);
		alert.show();
		}
		else
		Jtxt_suppplierid.requestFocus();
	}
	// Event Listener on TextField[#Jtxt_suppplierid].onAction
	@FXML
	public void Jtxt_suppplierid(ActionEvent event) {
		// TODO Autogenerated
		if("".equals(Jtxt_suppplierid.getText()))
		{	
			Alert alert = new Alert(AlertType.WARNING);
		alert.setTitle("DATA ERROR");
		//alert.setHeaderText("Information Alert");
		String s ="Insert Supplier id";
		alert.setContentText(s);
		alert.show();
		}
		else{
		String id = Jtxt_suppplierid.getText();
		try{
			String email="";
			Connection c = (Connection) DBcon.ConnerDb();
			Statement s = (Statement) c.createStatement();
			ResultSet r = s.executeQuery("select * from supplier where supplierid = '"+id+"'");
			while(r.next()){
				email=r.getString(7);
			}
			Jtxt_supemail.setText(email);
		}
		catch(Exception ee){
			System.out.println(ee);
		}
		Jtxt_cost.requestFocus();
		}
	}
	// Event Listener on TextField[#Jtxt_cost].onAction
	@FXML
	public void Jtxt_cost(ActionEvent event) {
		// TODO Autogenerated
		Pattern pattern = Pattern.compile("([0-9]*[.])?[0-9]+");
		Matcher matcher = pattern.matcher(Jtxt_cost.getText());
	if(!matcher.matches()){
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle("DATA ERROR");
		//alert.setHeaderText("Information Alert");
		String s ="Invalid Input";
		alert.setContentText(s);
		alert.show();
	}
		if("".equals(Jtxt_cost.getText()))
		{	
			Alert alert = new Alert(AlertType.WARNING);
			alert.setTitle("DATA ERROR");
			//alert.setHeaderText("Information Alert");
			String s ="Insert Unit cost";
			alert.setContentText(s);
			alert.show();
	}
	else{
	float tot = Float.parseFloat(Jtxt_cost.getText())*Integer.parseInt(Jtxt_quantity.getText());
	Jtxt_totcost.setText(String.valueOf(tot));
	Jdate_orderdate.requestFocus();
}
	}
	
	private boolean val(){
		Pattern pattern = Pattern.compile("([0-9]*[.])?[0-9]+");
		Matcher matcher = pattern.matcher(Jtxt_cost.getText());
		Matcher matcher1 = pattern.matcher(Jtxt_quantity.getText());
	if(!matcher.matches()||!matcher1.matches()){
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle("DATA ERROR");
		//alert.setHeaderText("Information Alert");
		String s ="Invalid Input";
		alert.setContentText(s);
		alert.show();
		return true;
	}
	else
		return false;
		
	}
	// Event Listener on JFXButton[#Jbtn_order].onAction
	@FXML
	public void btn_order(ActionEvent event) {
		// TODO Autogenerated
		if(Jdate_orderdate.getValue()==null || Jtxt_orderid.getText() == "" || Jtxt_itemid.getText()== "" || Jtxt_quantity.getText() == "" || Jtxt_suppplierid.getText() == "" || Jtxt_cost.getText() =="" || Jtxt_totcost.getText() =="" || val()){
			 Alert alert = new Alert(AlertType.ERROR);
         		alert.setTitle("ERROR");
         		//alert.setHeaderText("Information Alert");
         		String s ="Update Unsuccesfull";
         		alert.setContentText(s);
         		alert.show();
		}
         		else
         		{
         			try{
         				Connection c = (Connection) DBcon.ConnerDb();
         				String sql="Insert into orders values(?,?,?,?,?,?)";
         				PreparedStatement ps = (PreparedStatement) c.prepareStatement(sql); 
         				ps.setString(1, Jtxt_orderid.getText());
         				ps.setString(2, Jtxt_itemid.getText());
         				ps.setInt(3, Integer.parseInt(Jtxt_quantity.getText()));
         				ps.setFloat(4, Float.parseFloat(Jtxt_totcost.getText()));
         				ps.setString(5, Jtxt_suppplierid.getText());
         				LocalDate ld = Jdate_orderdate.getValue();
         				ps.setString(6, ld.toString());
         				int i=ps.executeUpdate();
         				if(i>0){
         					Alert alert = new Alert(AlertType.INFORMATION);
         					alert.setTitle("Information");
         					//alert.setHeaderText("Information Alert");
         					String s ="Update succesfully";
         					alert.setContentText(s);
         					alert.show();
         					clear();	
         			list.removeAll(list);
         					Jtable_order.setItems(list);
         					loadorderstable();
         				}}
        
	catch(SQLException e){
		System.out.println(e);
	}	}
	}
	// Event Listener on JFXButton[#Jbtn_email].onAction
	@FXML
	public void btn_email(ActionEvent event) {
		// TODO Autogenerated
		
		if(Jtxt_supemail.getText()==""||Jtxt_path.getText()=="" ){
			Alert alert = new Alert(AlertType.ERROR);
			alert.setTitle("DATA ERROR");
			//alert.setHeaderText("Information Alert");
			String s ="Please Check inserted details";
			alert.setContentText(s);
			alert.show();
		}
		else
		{
			SendEmail s = new SendEmail();
			s.send2(Jtxt_msg.getText(),Jtxt_path.getText(),Jtxt_supemail.getText());
		clear();
		}
	}
	// Event Listener on TextField[#Jtxt_sendersemail].onAction
	/*@FXML
	public void Jtxt_sendersemail(ActionEvent event) {
		// TODO Autogenerated
		if("".equals(Jtxt_sendersemail)){
			Alert alert = new Alert(AlertType.WARNING);
			alert.setTitle("DATA ERROR");
			//alert.setHeaderText("Information Alert");
			String s ="Enter Email Address";
			alert.setContentText(s);
			alert.show();
		}
		 Emailvalidator emailValidator = new Emailvalidator();
		   if(!emailValidator.validate(Jtxt_sendersemail.getText().trim())){
			   Alert alert = new Alert(AlertType.WARNING);
				alert.setTitle("DATA ERROR");
				//alert.setHeaderText("Information Alert");
				String s ="Enter valid email";
				alert.setContentText(s);
				alert.show();
		   }
		   else
			   Jtxt_sendersemail1.requestFocus();
	}*/
	// Event Listener on TextField[#Jtxt_sendersemail1].onAction
	
	// Event Listener on JFXButton[#Jbtn_chhose].onAction
	@FXML
	public void btn_choose(ActionEvent event) {
		// TODO Autogenerated
		
		FileChooser fc = new FileChooser();
		File select= fc.showOpenDialog(null);
		if(select != null){
			Jtxt_path.setText(select.getAbsolutePath());
		}
		else
			System.out.println("File not correct");
		Alert alert = new Alert(AlertType.ERROR);
		alert.setTitle("FILE ERROR");
		//alert.setHeaderText("Information Alert");
		String s ="Please select correct file";
		alert.setContentText(s);
		alert.show();
	}
	
	
	/*public void Jtable_ordersselect(){
		Jtable_order.setOnMouseClicked(e -> {
			
			Alert alert = new Alert(AlertType.WARNING);
			alert.setTitle("DATA ERROR");
			//alert.setHeaderText("Information Alert");
			String s ="You are not allowed to Edit or Delete orders";
			alert.setContentText(s);
			alert.show();
				
	});	
	}*/
	public void loadorderstable(){
		try{
			Connection c = (Connection) DBcon.ConnerDb();
			String q = "select * from orders " ;
			PreparedStatement ps = (PreparedStatement) c.prepareStatement(q);
			ResultSet rs=ps.executeQuery();
			while(rs.next()){
				list.add(new TableOrders(
						rs.getString(1), 
						rs.getString(2), 
						rs.getInt(3), 
						rs.getFloat(4), 
						rs.getString(5), 
						rs.getString(6)));
				Jtable_order.setItems(list);
			}
			FilteredList<TableOrders> filteredData = new FilteredList<>(list, p -> true);
			SortedList<TableOrders> sortedData = new SortedList<>(filteredData);
			sortedData.comparatorProperty().bind(Jtable_order.comparatorProperty());
			Jtable_order.setItems(sortedData);
			rs.close();
			
		
		}
		catch(Exception e){
			System.err.println(e);
		}
	}
	
	private void taketablevalues(){
		Jtable_order.setOnMouseClicked(e -> {
				TableOrders p= Jtable_order.getItems().get(Jtable_order.getSelectionModel().getSelectedIndex());
				System.out.println(p.getOrdeid());	
				Alert alert = new Alert(AlertType.WARNING);
				alert.setTitle("DATA ERROR");
				//alert.setHeaderText("Information Alert");
				String s ="You are not allowed to Edit or Delete orders";
				alert.setContentText(s);
				alert.show();
		});
	}
	public void clear() {
		Jdate_orderdate.setValue(null);
		Jtxt_orderid.setText("");
		Jtxt_itemid.setText("");
		Jtxt_quantity.setText("");
		Jtxt_suppplierid.setText("");
		Jtxt_cost.setText("");
		Jtxt_totcost.setText("");
		//Jtxt_sendemailsuppid.setText("");
		Jtxt_supemail.setText("");
	///	Jtxt_sendersemail1.setText("");
	//	Jtxt_sendersemail.setText("");
		Jtxt_msg.setText("");
		Jtxt_path.setText("");
	}
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		//Jtable_ordersselect();
		Jdate_orderdate.setValue(null);
		Jtxt_orderid.setText("");
		Jtxt_itemid.setText("");
		Jtxt_quantity.setText("");
		Jtxt_suppplierid.setText("");
		Jtxt_cost.setText("");
		Jtxt_totcost.setText("");
		//Jtxt_sendemailsuppid.setText("");
		Jtxt_supemail.setText("");
	///	Jtxt_sendersemail1.setText("");
	//	Jtxt_sendersemail.setText("");
		Jtxt_msg.setText("");
		Jtxt_path.setText("");
		
		try{
			//ObservableList<String> itemlist = FXCollections.observableArrayList();
			Connection c = (Connection) DBcon.ConnerDb();
			Statement s = (Statement) c.createStatement();
			ResultSet r = s.executeQuery("select MAX(orderid) from orders" );
			while(r.next()){
				Integer b = Integer.parseInt(r.getString(1).substring(1));
				System.out.println(b+1);
				Jtxt_orderid.setText((r.getString(1).substring(0,1))+String.valueOf(b+1));
			}
			
			}
			catch(Exception e1){
				System.out.println(e1);
			}
		
		// TODO Auto-generated method stub
		Jcol_orderid.setCellValueFactory(new PropertyValueFactory<TableOrders,String>("ordeid"));
		Jcol_Itemcode.setCellValueFactory(new PropertyValueFactory<TableOrders,String>("itemcode"));
		Jcol_amount.setCellValueFactory(new PropertyValueFactory<TableOrders,Integer>("amount"));
		Jcol_cost.setCellValueFactory(new PropertyValueFactory<TableOrders,Float>("cost"));
		Jcol_supplierid.setCellValueFactory(new PropertyValueFactory<TableOrders,String>("supplierid"));
		Jcol_orderdate.setCellValueFactory(new PropertyValueFactory<TableOrders,String>("orderdate"));
		Jtable_order.setItems(list);
		loadorderstable();
		taketablevalues();
		
		
		
		try{
			ObservableList<String> item = FXCollections.observableArrayList();
			Connection c = (Connection) DBcon.ConnerDb();
			Statement s = (Statement) c.createStatement();
			ResultSet r = s.executeQuery("select * from items");
			while(r.next()){
				item.add(r.getString(1));
			}
			TextFields.bindAutoCompletion(Jtxt_itemid,item);
			}
			catch(Exception e){
				System.out.println(e);
			}
		
	try{
		ObservableList<String> supplier = FXCollections.observableArrayList();
		Connection c = (Connection) DBcon.ConnerDb();
		Statement s = (Statement) c.createStatement();
		ResultSet r = s.executeQuery("select * from supplier");
		while(r.next()){
			supplier.add(r.getString(1));
		}
		TextFields.bindAutoCompletion(Jtxt_suppplierid,supplier);
		}
		catch(Exception e){
			System.out.println(e);
		}
	}
	}
